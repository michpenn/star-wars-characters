{"version":3,"sources":["components/Header.js","components/Film.js","components/Films.js","components/ErrorMessage.js","components/Character.js","components/CharacterSelection.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Film","props","film","title","dist_default","format","release_date","episode_id","Films","films","map","index","components_Film","key","ErrorMessage","errorMessage","Character","state","showFilmInfo","filmData","errorLoading","toggleFilmData","_this","setState","getFilmLinks","_callee","character","res","filmUrls","filmRequestData","regenerator_default","wrap","_context","prev","next","length","axios","get","url","sent","data","getFilmData","filmRequest","t0","concat","name","abrupt","stop","this","_callee2","arr","i","_context2","push","all","_this$state","cardBody","components_Films","components_ErrorMessage","onClick","classNames","fa-caret-down","fa-caret-up","Component","CharacterSelection","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","characters","components_Character","App","components_Header","components_CharacterSelection","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45142f6c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          <i className=\"fab fa-jedi-order\" /> Star Wars Characters\n          <div>\n            <ul className=\"navbar-nav mr-auto\" />\n          </div>\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Moment from \"react-moment\";\nimport PropTypes from \"prop-types\";\n\nconst Film = props => {\n  const { film } = props;\n\n  return (\n    <div className=\"list-group-item list-group-item-action\">\n      <div className=\"d-flex w-100 justify-content-between\">\n        <h5 className=\"mb-1\">{film.title}</h5>\n        <Moment format=\"dddd, MMMM DD YYYY\">{film.release_date}</Moment>\n      </div>\n      <p className=\"mb-1\">\n        <small>Episode {film.episode_id}</small>\n      </p>\n    </div>\n  );\n};\n\nFilm.propTypes = {\n  film: PropTypes.object.isRequired\n};\n\nexport default Film;\n","import React from \"react\";\nimport Film from \"./Film\";\nimport PropTypes from \"prop-types\";\n\nconst Films = props => {\n  const { films } = props;\n  return (\n    <div className=\"list-group\">\n      {films.map((film, index) => {\n        return <Film key={index} film={film} />;\n      })}\n    </div>\n  );\n};\n\nFilms.propTypes = {\n  films: PropTypes.array.isRequired\n};\n\nexport default Films;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ErrorMessage = props => {\n  return (\n    <ul className=\"list-group\">\n      <li className=\"list-group-item list-group-item-danger\">\n        {props.errorMessage}\n      </li>\n    </ul>\n  );\n};\n\nErrorMessage.propTypes = {\n  errorMessage: PropTypes.string.isRequired\n};\n\nexport default ErrorMessage;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport classNames from \"classnames\";\nimport Films from \"./Films\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport PropTypes from \"prop-types\";\n\nclass Character extends Component {\n  state = {\n    showFilmInfo: false,\n    filmData: [],\n    errorLoading: false,\n    errorMessage: \"\"\n  };\n\n  toggleFilmData = () => {\n    const { showFilmInfo } = this.state;\n    if (showFilmInfo) {\n      this.setState({ showFilmInfo: false });\n    } else {\n      this.getFilmLinks();\n    }\n  };\n\n  getFilmLinks = async () => {\n    const character = this.props.character;\n    const { errorLoading } = this.state;\n    let { filmData } = this.state;\n\n    if (!filmData.length && !errorLoading) {\n      try {\n        const res = await axios.get(character.url);\n        const filmUrls = res.data.films;\n        const filmRequestData = await this.getFilmData(filmUrls);\n        filmData = filmRequestData.map(filmRequest => {\n          return filmRequest.data;\n        });\n        this.setState({ filmData: filmData });\n      } catch (e) {\n        this.setState({\n          showFilmInfo: true,\n          errorLoading: true,\n          errorMessage: `${\n            character.name\n          }'s films seem to be lost in the galaxy`\n        });\n\n        return;\n      }\n    }\n    this.setState({ showFilmInfo: true });\n  };\n\n  getFilmData = async arr => {\n    const filmData = [];\n    for (let i = 0; i < arr.length; i++) {\n      filmData.push(axios.get(arr[i]));\n    }\n    return axios.all(filmData);\n  };\n\n  render() {\n    const { name } = this.props.character;\n    const { showFilmInfo, filmData, errorLoading, errorMessage } = this.state;\n\n    const cardBody =\n      showFilmInfo && !errorLoading ? (\n        <Films films={filmData} />\n      ) : showFilmInfo && errorLoading ? (\n        <ErrorMessage errorMessage={errorMessage} />\n      ) : null;\n    return (\n      <div className=\"col-xs-12 col-sm-8\">\n        <div className=\"card card-body mb-3\">\n          <h4>\n            {name}{\" \"}\n            <span className=\"small caret-character\">\n              <i\n                onClick={this.toggleFilmData}\n                className={classNames(\"fas\", {\n                  \"fa-caret-down\": !showFilmInfo,\n                  \"fa-caret-up\": showFilmInfo\n                })}\n              />\n            </span>\n          </h4>\n          {cardBody}\n        </div>\n      </div>\n    );\n  }\n}\n\nCharacter.propTypes = {\n  character: PropTypes.object.isRequired\n};\n\nexport default Character;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Character from \"./Character\";\n\nclass CharacterSelection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      characters: []\n    };\n  }\n\n  async componentDidMount() {\n    const res = await axios.get(\"characters.json\");\n    this.setState({\n      characters: res.data.characters\n    });\n  }\n\n  render() {\n    const { characters } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <h1 className=\"display-3\">\n            <span className=\"text-danger\">Select</span> a Character\n          </h1>\n        </div>\n        <div className=\"row\">\n          {characters.map((character, index) => {\n            return <Character key={index} character={character} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CharacterSelection;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport CharacterSelection from \"./components/CharacterSelection\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <CharacterSelection />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}